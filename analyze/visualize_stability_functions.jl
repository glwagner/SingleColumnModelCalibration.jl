using Oceananigans
using Oceananigans.Units
using Oceananigans.TurbulenceClosures: CATKEVerticalDiffusivity
using Printf
using JLD2
using CairoMakie

set_theme!(Theme(fontsize=24, linewidth=4, alpha=0.6))

d = 4
dash = Linestyle([0.0, d, 1.6d, 2.6d])

@load "optimal_catke.jld2"
@show optimal_catke

CÀ°·µíc = optimal_catke.mixing_length.CÀ°·µíc
CÀ°·µíu = optimal_catke.mixing_length.CÀ°·µíu
CÀ°·µíe = optimal_catke.mixing_length.CÀ°·µíe
C ∞‚Å±c = optimal_catke.mixing_length.C ∞‚Å±c
C ∞‚Å±u = optimal_catke.mixing_length.C ∞‚Å±u
C ∞‚Å±e = optimal_catke.mixing_length.C ∞‚Å±e
C·∂úc  = optimal_catke.mixing_length.C·∂úc
C·∂úu  = optimal_catke.mixing_length.C·∂úu
C·∂úe  = optimal_catke.mixing_length.C·∂úe
C·µò‚Åøc = optimal_catke.mixing_length.C·µò‚Åøc
C·µò‚Åøu = optimal_catke.mixing_length.C·µò‚Åøu
C·µò‚Åøe = optimal_catke.mixing_length.C·µò‚Åøe
CÀ¢   = optimal_catke.mixing_length.CÀ¢
CRi·µü = optimal_catke.mixing_length.CRi·µü
CRi‚Å∞ = optimal_catke.mixing_length.CRi‚Å∞
CÀ°·µíD = optimal_catke.turbulent_kinetic_energy_equation.CÀ°·µíD
C ∞‚Å±D = optimal_catke.turbulent_kinetic_energy_equation.C ∞‚Å±D
C·µò‚ÅøD = optimal_catke.turbulent_kinetic_energy_equation.C·µò‚ÅøD

optimal_parameters = (;
    CÀ°·µíc,
    CÀ°·µíu,
    CÀ°·µíe, 
    C ∞‚Å±c, 
    C ∞‚Å±u, 
    C ∞‚Å±e, 
    C·∂úc,  
    C·∂úu, 
    C·∂úe,  
    C·µò‚Åøc, 
    C·µò‚Åøu, 
    C·µò‚Åøe, 
    CÀ¢,   
    CRi·µü,
    CRi‚Å∞, 
    CÀ°·µíD,
    C ∞‚Å±D,
    C·µò‚ÅøD)

derived_parameters = (
    Pr‚ÇÄ = CÀ°·µíu / CÀ°·µíc,
    Pr‚àû = C ∞‚Å±u / C ∞‚Å±c,
    Pr‚Åª = C·µò‚Åøu / C·µò‚Åøc,
    Pr·∂ú = C·∂úu / C·∂úc,
    Sc‚ÇÄ = CÀ°·µíu / CÀ°·µíe,
    Sc‚àû = C ∞‚Å±u / C ∞‚Å±e,
    Sc‚Åª = C·µò‚Åøu / C·µò‚Åøe,
    Sc·∂ú = C·∂úu / C·∂úe,
    Ri‚òÖ = CÀ°·µíu / (CÀ°·µíc + CÀ°·µíD),
    œ∞vk = CÀ¢ * (CÀ°·µíu^3 / CÀ°·µíD)^(1/4),
    Œì‚ÇÄ = CÀ°·µíc / CÀ°·µíD,
    Œì‚àû = C ∞‚Å±c / C ∞‚Å±D,
    Ri‚Å∫ = CRi‚Å∞ + CRi·µü
)

for name in keys(optimal_parameters)
    println(name, ": ", optimal_parameters[name])
end

println()

for name in keys(derived_parameters)
    println(name, ": ", derived_parameters[name])
end

fig = Figure(size=(1200, 500))

#xlabel = L"Richardson number, $N^2 / | \partial_z u |^2$"
xlabel = "Richardson number"

axSt = Axis(fig[1, 1]; xlabel, ylabel="Stability \n functions")
axSte = Axis(fig[2, 1]; xlabel, ylabel="TKE stability \n function")
axPr = Axis(fig[1:2, 2]; xlabel, yaxisposition=:right, ylabel="Prandtl and TKE Schmidt numbers")


Ri = -1:1e-3:2

@inline step(x, c, w) = max(zero(x), min(one(x), (x - c) / w))

@inline function ùïä(Ri, œÉ‚Åª, œÉ‚Å∞, œÉ‚àû, c=CRi‚Å∞, w=CRi·µü)
    œÉ‚Å∫ = œÉ‚Å∞ + (œÉ‚àû - œÉ‚Å∞) * step(Ri, c, w)
    œÉ = œÉ‚Åª * (Ri < 0) + œÉ‚Å∫ * (Ri ‚â• 0)
    return œÉ
end

alpha = 0.6
tkecolor = :tomato

lines!(axSt, Ri, ùïä.(Ri, C·µò‚Åøc, CÀ°·µíc, C ∞‚Å±c); alpha, label="Tracers") 
lines!(axSt, Ri, ùïä.(Ri, C·µò‚Åøu, CÀ°·µíu, C ∞‚Å±u); alpha, label="Momentum") 
lines!(axSt, Ri, 1 ./ ùïä.(Ri, C·µò‚ÅøD, CÀ°·µíD, C ∞‚Å±D); alpha, label="Dissipation (1/ùïä·¥∞)") 

lne = lines!(axSt, Ri, NaN .* ùïä.(Ri, C·µò‚Åøe, CÀ°·µíe, C ∞‚Å±e), color=tkecolor, label="TKE") 
lines!(axSte, Ri, ùïä.(Ri, C·µò‚Åøe, CÀ°·µíe, C ∞‚Å±e), color=lne.color, label="TKE") 

lines!(axPr, Ri, ùïä.(Ri, C·µò‚Åøu, CÀ°·µíu, C ∞‚Å±u) ./ ùïä.(Ri, C·µò‚Åøc, CÀ°·µíc, C ∞‚Å±c),
       color=:black, label="Prandtl number")
lines!(axPr, Ri, ùïä.(Ri, C·µò‚Åøu, CÀ°·µíu, C ∞‚Å±u) ./ ùïä.(Ri, C·µò‚Åøe, CÀ°·µíe, C ∞‚Å±e),
       color=:black, linestyle=:dot, label="Schmidt number for TKE")

#axislegend(axSt, position=:lt)
Legend(fig[0, 1:2], axSt, framevisible=false, nbanks=4, tellheight=true)
axislegend(axPr, position=:lt)

hidexdecorations!(axSt, grid=false)
hidespines!(axSt, :t, :r, :b)
hidespines!(axPr, :t, :l)
hidespines!(axSte, :t, :r)

#xlims!(axSt, -1, 2)
ylims!(axSt, 0, 2.0)

display(fig)

save("stability_Prandtl_Schmidt_numbers.pdf", fig)
